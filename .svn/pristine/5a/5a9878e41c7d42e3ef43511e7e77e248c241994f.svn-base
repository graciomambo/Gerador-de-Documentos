

using LinqToExcel;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Excel = Microsoft.Office.Interop.Excel;
using Gerador_de_Documentos;
using LinqToExcel.Query;
using System.Threading;

namespace Gerador_de_Documentos
    {
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 

    public partial class MainWindow : Window
        {
        const String SELECCAO_VAZIA = "Nenhum Ficheiro Selecionado";
        
        String filePath;
        Datim datim= new Datim();
        private ExcelQueryFactory excel;
        private List<string> listaColunas;
        private List<string> distinctUS;
        private List<string> distinctSourceTable;

        public MainWindow()
            {
            InitializeComponent();
            ficheirosSelecionados.Items.Add(SELECCAO_VAZIA);
            comboIndicadorListaCampo.IsEnabled=false;
            comboIndicadorListaFiltros.IsEnabled=false;
            comboUSListaCampo.IsEnabled=false;
            comboUSListaFiltros.IsEnabled=false;
            comboValueListaCampo.IsEnabled=false;
            comboValueListaFiltros.IsEnabled=false;

            }
        private void clicarSelecionarFicheiro(object sender , RoutedEventArgs e)
            {
        
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Multiselect=false;
            openFileDialog.Filter="Excel Files|*.xls;*.xlsx;*.xlsm;*.csv";
            openFileDialog.InitialDirectory=Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
      
            if(openFileDialog.ShowDialog()==true)
                {
                if(ficheirosSelecionados.Items.Count>0)
                    ficheirosSelecionados.Items.Remove(ficheirosSelecionados.Items[0]);
                foreach(string file in openFileDialog.FileNames)
                    ficheirosSelecionados.Items.Add(file);
                filePath=openFileDialog.FileNames[0];
                
                excel=new ExcelQueryFactory(filePath);
                excel.StrictMapping=StrictMappingType.Both;
                excel.ReadOnly=true;
                
                listaColunas=excel.GetColumnNames(datim.SHEET_DEFEITO).ToList();
                datim.CAMPO_US_DEFEITO=listaColunas[7];
             
                excel.UsePersistentConnection=false;
                
                carregarCampos(sender,e);

                }

            }
        private  void carregarCampos(object sender , RoutedEventArgs e)
            {
            
             Task.Run(() =>
             {
                 Dispatcher.Invoke(() =>
                 {
                 comboIndicadorListaCampo.Items.Clear();
                 comboUSListaCampo.Items.Clear();
                 comboValueListaCampo.Items.Clear();
                     foreach(var lc in listaColunas)
                         {
                         comboIndicadorListaCampo.Items.Add(lc);
                         
                         comboUSListaCampo.Items.Add(lc);
                         comboValueListaCampo.Items.Add(lc);
                         comboIndicadorListaCampo.IsEnabled=true;
                         comboUSListaCampo.IsEnabled=true;
                         comboValueListaCampo.IsEnabled=true;
                         }
                     comboIndicadorListaCampo.SelectedItem=datim.CAMPO_INDICADOR_DEFEITO;
                     comboUSListaCampo.SelectedItem=datim.CAMPO_US_DEFEITO;
                     comboValueListaCampo.SelectedItem=datim.CAMPO_VALOR_DEFEITO;
                 });

             });

             Task.Run(() =>
            {
                distinctSourceTable=(from d in excel.Worksheet<Datim>()
                            select d.SourceTable).Distinct().ToList();
                preencherComboBoxFiltro(comboIndicadorListaFiltros , distinctSourceTable);
            });
            Task.Run(() =>
           {
           distinctUS=(from d in excel.Worksheet<Datim>()
                       select d.US).Distinct().ToList();
                preencherComboBoxFiltro(comboUSListaFiltros , distinctUS);
            });
             Task.Run(() =>
            {
                preencherComboBoxFiltroValor(comboValueListaFiltros);
            });
               
            comboIndicadorListaFiltros.SelectedItem=datim.FILTRO_INDICADOR_DEFEITO;
            comboUSListaFiltros.SelectedItem=datim.FILTRO_US_DEFEITO;
            comboValueListaFiltros.SelectedItem=datim.FILTRO_VALOR_DEFEITO;
             
          
            }
        private void preencherComboBoxFiltro(ComboBox filtro , List<string> distintos)
            {

           
            Dispatcher.Invoke(() => {
            String criterioPadrao = "Todos";
            filtro.Items.Clear();
            filtro.Items.Add(criterioPadrao);
            filtro.SelectedItem=criterioPadrao;
                
           
            foreach(String i in distintos)
                {
                 filtro.Items.Add(i); 
                
                }
                filtro.IsEnabled=true;
            });

            }
        private void preencherComboBoxFiltroValor(ComboBox filtro)
            {
            Dispatcher.Invoke(() => {
            filtro.Items.Clear();
            filtro.Items.Add("Excluir Zero");
            filtro.Items.Add("Incluir Zero");
            filtro.SelectedItem=filtro.Items[0];
            filtro.IsEnabled=true;
            });

            }
        private void clicarBotaoGerar(object sender , RoutedEventArgs e)
            {if(validForm())
                    { MessageBox.Show("Preencha todos campos" , "Gerador" , MessageBoxButton.OK , MessageBoxImage.Information); }
                else { 
                

            gerarFicheiro();
                }
            }

        private bool validForm()
            {
            if(   comboIndicadorListaCampo.SelectedItem==null 
                &comboIndicadorListaFiltros.SelectedItem==null 
                &comboUSListaCampo.SelectedItem==null
                &comboUSListaFiltros.SelectedItem==null
                &comboValueListaCampo.SelectedItem==null
                &comboValueListaFiltros.SelectedItem==null &
                 comboIndicadorListaCampo.Items.IsEmpty
                &comboIndicadorListaFiltros.Items.IsEmpty
                &comboUSListaCampo.Items.IsEmpty
                &comboUSListaFiltros.Items.IsEmpty
                &comboValueListaCampo.Items.IsEmpty
                &comboValueListaFiltros.Items.IsEmpty

                )
                return true;
            else return false;
            }

        private void gerarFicheiro()
            {
            List<string> fi = new List<string>();
            List<string> fus = new List<string>();
            List<Datim> resultado = new List<Datim>();
            if(comboIndicadorListaFiltros.SelectedItem.ToString()==datim.FILTRO_INDICADOR_DEFEITO)
                fi=distinctSourceTable;
            else
                fi.Add(comboIndicadorListaFiltros.SelectedItem.ToString());
            
            if(comboUSListaFiltros.SelectedItem.ToString()==datim.FILTRO_US_DEFEITO)
                fus=distinctUS;
            else
                fus.Add(comboUSListaFiltros.SelectedItem.ToString());




            if(comboValueListaCampo.SelectedItem.Equals(datim.FILTRO_VALOR_DEFEITO)) {
          

         resultado = (from d in excel.Worksheet<Datim>()
                             where d.SourceTable==comboIndicadorListaCampo.SelectedItem.ToString() &&d.US==comboUSListaCampo.SelectedItem.ToString()&& d.Value.Single()>0
                             select d).Where(x=>fus.Contains(x.US)).Where(x => fi.Contains(x.SourceTable)).ToList();
                    }
         
            else
                {
              resultado = (from d in excel.Worksheet<Datim>()
                                         where d.SourceTable==comboIndicadorListaCampo.SelectedItem.ToString()&&d.US==comboUSListaCampo.SelectedItem.ToString()
                                         select d).ToList();
                }



            foreach(Datim r in resultado)
                {
                foreach(var i in fi)
                    {
                    foreach(var u in fus)
                        {
                        if(r.SourceTable.Equals(i)&&r.US.Equals(u)) { 
                        Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
                        xlApp.Visible=true;
                        Excel.Workbook xlWorkBook;
                        Excel.Worksheet xlWorkSheet;

                        object misValue = System.Reflection.Missing.Value;
                        xlWorkBook=xlApp.Workbooks.Add(misValue);
                        xlWorkSheet=(Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);



                        xlWorkBook.SaveAs("DATIM_"+i+"_"+u, Excel.XlFileFormat.xlWorkbookNormal , misValue , misValue , misValue , misValue , Excel.XlSaveAsAccessMode.xlExclusive , misValue , misValue , misValue , misValue , misValue);
                        xlWorkBook.Close(true , misValue , misValue);
                        xlApp.Quit();

                        Marshal.ReleaseComObject(xlWorkSheet);
                        Marshal.ReleaseComObject(xlWorkBook);
                        Marshal.ReleaseComObject(xlApp);
                        }
                      }
                    }
                }

            }
        private void botaoSair(object sender , RoutedEventArgs e) { }
        }

    }